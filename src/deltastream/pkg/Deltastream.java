/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package deltastream.pkg;

/**
 *
 * @author fisksoppa
 */
public class Deltastream extends javax.swing.JFrame {
    
    static Config config;
    static Broadcast broadcast; 
    /**
     * Creates new form Deltastream
     */
    public Deltastream() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        clientTab = new javax.swing.JPanel();
        startClient = new javax.swing.JButton();
        stopClient = new javax.swing.JButton();
        targetIP = new javax.swing.JTextField();
        targetPort = new javax.swing.JTextField();
        listenPort = new javax.swing.JTextField();
        outputPort = new javax.swing.JTextField();
        outputIP = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        serverTab = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        sourceInputPort = new javax.swing.JTextField();
        externalListenPort = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        sampleTime = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        startServer = new javax.swing.JButton();
        stopServer = new javax.swing.JButton();
        consoleTab = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        startClient.setText("Connect");
        startClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startClientActionPerformed(evt);
            }
        });

        stopClient.setText("Disconnect");
        stopClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopClientActionPerformed(evt);
            }
        });

        targetIP.setToolTipText("A IP of a client or server in the broadcast of interest");

        targetPort.setToolTipText("The corresponding port to that IP");
        targetPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetPortActionPerformed(evt);
            }
        });

        listenPort.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        listenPort.setText("1082");
        listenPort.setToolTipText("The port on this client to which external clients will connect");
        listenPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listenPortActionPerformed(evt);
            }
        });

        outputPort.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        outputPort.setText("4444");
        outputPort.setToolTipText("The corresponding port to that IP");

        outputIP.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        outputIP.setText("127.0.0.1");
        outputIP.setToolTipText("The IP address to which the downloaded stream will be releyed to (127.0.0.1 is this computer)");
        outputIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputIPActionPerformed(evt);
            }
        });

        jLabel1.setText("Listen port");

        jLabel3.setText("Output IP");

        jLabel4.setText("Source IP");

        javax.swing.GroupLayout clientTabLayout = new javax.swing.GroupLayout(clientTab);
        clientTab.setLayout(clientTabLayout);
        clientTabLayout.setHorizontalGroup(
            clientTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientTabLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(clientTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(clientTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientTabLayout.createSequentialGroup()
                        .addGroup(clientTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(targetIP)
                            .addComponent(outputIP, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(clientTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(clientTabLayout.createSequentialGroup()
                                .addComponent(targetPort, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                                .addGap(94, 94, 94)
                                .addComponent(startClient)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addComponent(stopClient)
                                .addGap(18, 18, 18))
                            .addGroup(clientTabLayout.createSequentialGroup()
                                .addComponent(outputPort, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(clientTabLayout.createSequentialGroup()
                        .addComponent(listenPort, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        clientTabLayout.setVerticalGroup(
            clientTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clientTabLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(clientTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(listenPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(clientTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(targetPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(clientTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(outputIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                .addGroup(clientTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startClient)
                    .addComponent(stopClient))
                .addGap(40, 40, 40))
        );

        tabs.addTab("Client", clientTab);

        jLabel2.setText("Source Input Port");

        sourceInputPort.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sourceInputPort.setText("1081");
        sourceInputPort.setToolTipText("The port to which the source stream should connect to");
        sourceInputPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceInputPortActionPerformed(evt);
            }
        });

        externalListenPort.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        externalListenPort.setText("1082");
        externalListenPort.setToolTipText("The port the clients will connect to on this server");

        jLabel5.setText("Extrenal Listen Port");

        sampleTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sampleTime.setText("100");
        sampleTime.setToolTipText("The period for sampling the input stream in milli seconds (ms = s/1000)");

        jLabel6.setText("Sample time (ms)");

        startServer.setText("Start Broadcast");
        startServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startServerActionPerformed(evt);
            }
        });

        stopServer.setText("Stop Broadcast");
        stopServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout serverTabLayout = new javax.swing.GroupLayout(serverTab);
        serverTab.setLayout(serverTabLayout);
        serverTabLayout.setHorizontalGroup(
            serverTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serverTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(serverTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sourceInputPort, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(externalListenPort)
                    .addComponent(sampleTime))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, serverTabLayout.createSequentialGroup()
                .addContainerGap(217, Short.MAX_VALUE)
                .addComponent(startServer)
                .addGap(53, 53, 53)
                .addComponent(stopServer)
                .addGap(53, 53, 53))
        );
        serverTabLayout.setVerticalGroup(
            serverTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverTabLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(serverTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(sourceInputPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(serverTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(externalListenPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(serverTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sampleTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                .addGroup(serverTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopServer)
                    .addComponent(startServer))
                .addGap(40, 40, 40))
        );

        tabs.addTab("Server", serverTab);

        javax.swing.GroupLayout consoleTabLayout = new javax.swing.GroupLayout(consoleTab);
        consoleTab.setLayout(consoleTabLayout);
        consoleTabLayout.setHorizontalGroup(
            consoleTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 535, Short.MAX_VALUE)
        );
        consoleTabLayout.setVerticalGroup(
            consoleTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 344, Short.MAX_VALUE)
        );

        tabs.addTab("Console", consoleTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stopClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopClientActionPerformed
        // TODO add your handling code here:
        client.runClient = false; 
        thread.interrupt();
    }//GEN-LAST:event_stopClientActionPerformed

    private void targetPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_targetPortActionPerformed

    private void startClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startClientActionPerformed
        // TODO add your handling code here:
        String targetIPStr =  targetIP.getText();
        String listenPortStr = listenPort.getText();
        String outputIPStr = outputIP.getText();
        String outputPortStr = outputPort.getText();
        String targetPortStr = targetPort.getText();
        config = new Config();
        
        Config.inputStreamPort = Integer.parseInt(listenPortStr);
        Config.remoteUDPOutputStreamPort = Integer.parseInt(outputPortStr);
        Config.remoteUDPOutputStreamIP =  outputIPStr;
        Config.rootNodeIP = targetIPStr; 
        Config.rootNodePort = Integer.parseInt(targetPortStr);
        
        client = new DeltastreamClient(config);
        thread = new Thread(client, "Client");
        thread.start(); 
    }//GEN-LAST:event_startClientActionPerformed

    private void listenPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listenPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listenPortActionPerformed

    private void outputIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outputIPActionPerformed

    private void sourceInputPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceInputPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sourceInputPortActionPerformed

    private void startServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startServerActionPerformed
        // TODO add your handling code here:
        String inputStreamPortStr = sourceInputPort.getText();
        String externalListenPortStr = externalListenPort.getText();
        String sampleTimeStr = sampleTime.getText();
        
        Config.inputStreamPort = Integer.parseInt(inputStreamPortStr);
        Config.timeLimit = Integer.parseInt(sampleTimeStr);
        Config.clientServerSocketPort = Integer.parseInt(externalListenPortStr);
        config = new Config();
        
        server = new DeltastreamServer(config);
        thread = new Thread(server, "Server");
        thread.start(); 
    }//GEN-LAST:event_startServerActionPerformed

    private void stopServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopServerActionPerformed
        // TODO add your handling code here:
        server.runServer = false; //TODO interrupt
        thread.interrupt();
    }//GEN-LAST:event_stopServerActionPerformed
    
    /**
     * @param args the command line arguments
     */
    DeltastreamClient client;
    DeltastreamServer server;
    Thread thread;
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Deltastream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Deltastream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Deltastream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Deltastream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                

                new Deltastream().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel clientTab;
    private javax.swing.JPanel consoleTab;
    private javax.swing.JTextField externalListenPort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField listenPort;
    private javax.swing.JTextField outputIP;
    private javax.swing.JTextField outputPort;
    private javax.swing.JTextField sampleTime;
    private javax.swing.JPanel serverTab;
    private javax.swing.JTextField sourceInputPort;
    private javax.swing.JButton startClient;
    private javax.swing.JButton startServer;
    private javax.swing.JButton stopClient;
    private javax.swing.JButton stopServer;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTextField targetIP;
    private javax.swing.JTextField targetPort;
    // End of variables declaration//GEN-END:variables
}
